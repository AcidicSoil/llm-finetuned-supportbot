.............................................F                           [100%]
================================== FAILURES ===================================
___________________________ test_cli_overrides_all ____________________________

tmp_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-4/test_cli_overrides_all0')

    def test_cli_overrides_all(tmp_path):
        """Explicit CLI flags must override both preset and `--config` values."""
        args = _run_parse([
            "--model", "dummy/model",
            "--splits-dir", str(tmp_path),
            "--output-dir", str(tmp_path / "out"),
            "--preset", "gpu-fp16",
            "--bf16",
        ])
        assert args.bf16 is True
>       assert args.fp16 is False
E       AssertionError: assert True is False
E        +  where True = Namespace(config=None, preset='gpu-fp16', model='dummy/model', splits_dir=WindowsPath('C:/Users/user/AppData/Local/Tem...ion=False, load_best_model_at_end=False, metric_name='eval_loss', greater_is_better=False, resume_from_checkpoint=None).fp16

tests\unit\test_presets.py:95: AssertionError
---------------------------- Captured stdout call -----------------------------
[train_lora] Effective arguments:
{
  "auto_precision": false,
  "beta": 0.1,
  "bf16": true,
  "bnb_compute_dtype": "bfloat16",
  "bnb_double_quant": false,
  "bnb_quant_type": "nf4",
  "dpo_train_file": null,
  "dpo_val_file": null,
  "epochs": 1,
  "eval_steps": 100,
  "fp16": true,
  "gradient_accumulation_steps": 1,
  "greater_is_better": false,
  "learning_rate": 2e-05,
  "load_best_model_at_end": false,
  "logging_steps": 10,
  "lora_alpha": 32,
  "lora_dropout": 0.05,
  "lora_r": 16,
  "lora_target_modules": [
    "auto"
  ],
  "max_length": 512,
  "max_prompt_length": 256,
  "metric_name": "eval_loss",
  "model": "dummy/model",
  "output_dir": "C:\\Users\\user\\AppData\\Local\\Temp\\pytest-of-user\\pytest-4\\test_cli_overrides_all0\\out",
  "per_device_eval_batch_size": 1,
  "per_device_train_batch_size": 1,
  "preset": "gpu-fp16",
  "quant": "4bit",
  "recipe": "sft",
  "resume_from_checkpoint": null,
  "save_steps": 50,
  "seed": 42,
  "splits_dir": "C:\\Users\\user\\AppData\\Local\\Temp\\pytest-of-user\\pytest-4\\test_cli_overrides_all0"
}
============================== warnings summary ===============================
tests/test_models.py::test_model_happy_path
tests/test_models.py::test_string_fields_cannot_be_empty[id-update0]
tests/test_models.py::test_string_fields_cannot_be_empty[question-update1]
tests/test_models.py::test_string_fields_cannot_be_empty[answer-update2]
tests/test_models.py::test_string_fields_cannot_be_empty[source-update3]
tests/test_models.py::test_string_fields_cannot_be_empty[tags-update4]
tests/test_models.py::test_validate_dataset_duplicate_ids_and_disallowed_tags
tests/test_models.py::test_validate_dataset_duplicate_ids_and_disallowed_tags
tests/test_models.py::test_validate_dataset_pii_scan_detects_email_like_patterns
  C:\Users\user\projects\portfolio\ai-ml-portfolio-starter\llm-finetune-supportbot\tests\test_models.py:16: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    timestamp=datetime.utcnow(),

tests/test_models.py::test_validate_dataset_duplicate_ids_and_disallowed_tags
  C:\Users\user\projects\portfolio\ai-ml-portfolio-starter\llm-finetune-supportbot\tests\test_models.py:51: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    id="a", meta=dict(source="web", timestamp=datetime.utcnow(), tags=["ok"])

tests/test_models.py::test_validate_dataset_duplicate_ids_and_disallowed_tags
  C:\Users\user\projects\portfolio\ai-ml-portfolio-starter\llm-finetune-supportbot\tests\test_models.py:54: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    id="a", meta=dict(source="web", timestamp=datetime.utcnow(), tags=["bad"])

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/unit/test_presets.py::test_cli_overrides_all - AssertionError: a...
1 failed, 45 passed, 11 warnings in 12.95s
